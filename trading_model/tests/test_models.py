"""
test_models.py

This module contains unit tests for the `models` module, which provides functionality
for preparing data, training, and evaluating machine learning models.

Tests:
    - test_prepare_features_and_target: Validates feature and target preparation.
    - test_split_data: Ensures correct splitting of data into training and testing sets.
    - test_train_model: Verifies the training of a Random Forest Classifier.
    - test_evaluate_model: Checks the evaluation metrics generated by the model.

Usage:
    Run this script using pytest:
        pytest test_models.py
"""
import os
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from src.models import prepare_features_and_target, split_data, train_model, evaluate_model

def test_prepare_features_and_target():
    """
    Test the `prepare_features_and_target` function.

    Validates:
        - The target column is correctly excluded from the features (X).
        - The target (y) length matches the input data length.
        - The features (X) contain all columns except the target.

    Asserts:
        - Target column is not present in the feature set (X).
        - Length of target (y) matches input data.
        - Feature set (X) excludes the target column.
    """
    data = pd.DataFrame({
        "feature1": [1, 2, 3, 4, 5],
        "feature2": [5, 4, 3, 2, 1],
        "target": [0, 1, 0, 1, 0]
    })
    X, y = prepare_features_and_target(data, target_column="target")

    assert "target" not in X.columns, "Target column should not be in features (X)."
    assert len(y) == len(data), "Target (y) length should match input data length."
    assert X.shape[1] == len(data.columns) - 1, "Feature set (X) should exclude the target column."

def test_split_data():
    """
    Test the `split_data` function.

    Validates:
        - Correct proportion of data is split into training and testing sets.

    Asserts:
        - Training set has the expected number of rows based on test_size.
        - Test set has the expected number of rows based on test_size.
        - Lengths of y_train and y_test match their respective feature sets.
    """
    data = pd.DataFrame({
        "feature1": [1, 2, 3, 4, 5],
        "feature2": [5, 4, 3, 2, 1],
        "target": [0, 1, 0, 1, 0]
    })
    X, y = prepare_features_and_target(data, target_column="target")
    X_train, X_test, y_train, y_test = split_data(X, y, test_size=0.2, random_state=42)

    assert X_train.shape[0] == 4, "Training set should have 4 rows with test_size=0.2."
    assert X_test.shape[0] == 1, "Test set should have 1 row with test_size=0.2."
    assert len(y_train) == 4, "Training target should have 4 rows."
    assert len(y_test) == 1, "Test target should have 1 row."

def test_train_model():
    """
    Test the `train_model` function.

    Validates:
        - The model is a RandomForestClassifier.
        - The trained model has a `predict` method for inference.

    Asserts:
        - The returned model is an instance of RandomForestClassifier.
        - The model has the `predict` method.
    """
    data = pd.DataFrame({
        "feature1": [1, 2, 3, 4, 5],
        "feature2": [5, 4, 3, 2, 1],
        "target": [0, 1, 0, 1, 0]
    })
    X, y = prepare_features_and_target(data, target_column="target")
    X_train, _, y_train, _ = split_data(X, y, test_size=0.2, random_state=42)

    model = train_model(X_train, y_train)

    assert isinstance(model, RandomForestClassifier), "Trained model should be a RandomForestClassifier."
    assert hasattr(model, "predict"), "Trained model should have a predict method."

def test_evaluate_model():
    """
    Test the `evaluate_model` function.

    Validates:
        - Evaluation metrics include accuracy, classification report, and confusion matrix.
        - Accuracy is non-negative.

    Asserts:
        - Metrics dictionary includes accuracy, classification report, and confusion matrix.
        - Accuracy is a non-negative value.
    """
    data = pd.DataFrame({
        "feature1": [1, 2, 3, 4, 5],
        "feature2": [5, 4, 3, 2, 1],
        "target": [0, 1, 0, 1, 0]
    })
    X, y = prepare_features_and_target(data, target_column="target")
    X_train, X_test, y_train, y_test = split_data(X, y, test_size=0.2, random_state=42)

    model = train_model(X_train, y_train)
    metrics = evaluate_model(model, X_test, y_test)

    assert "accuracy" in metrics, "Metrics should include accuracy."
    assert "classification_report" in metrics, "Metrics should include classification report."
    assert "confusion_matrix" in metrics, "Metrics should include confusion matrix."
    assert metrics["accuracy"] >= 0, "Accuracy should be a non-negative value."
